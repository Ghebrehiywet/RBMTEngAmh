@model RBMTEngAmh.Models.RBTM.WordFeed
@using RBMTEngAmh.Logic
@using RBMTEngAmh.Models.RBTM

@{
    ViewBag.Title = "Index";
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js">
</script>

<script>

    $(document).ready(() => {
        $("#select").val('2');
    });   
    $(document).ready(function () {
        $("#submit").click(function () {
            $("#myselection option:selected").text();
            alert($("#myselection option:selected").text());
        });
    });
    //  WordPOSType
    $('select[name="WordPOSType"]').change(function () {
        alert('WordPOSType');
        if ($(this).val() == "2") {
            alert("call the do something function on option 2");
        }
    });

    //  WordType
    $('select[name="WordType"]').change(function () {
        alert('WordType');
        if ($(this).val() == "2") {
            alert("call the do something function on option 2");
        }
    });
</script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal col-md-6">
        <h4>Nouns</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.Label("Language", htmlAttributes: new { @class = "control-label col-md-3" })
            @*@Html.DropDownList("Language", Enum.GetValues(typeof(Languages)), "Select One", htmlAttributes: new { @class = "form-control", @required = "required" })*@

            <div class="col-md-9">
                @Html.DropDownList("Language",
                   Enum.GetValues(typeof(Languages)).Cast<Languages>().Select(x => new SelectListItem {
                       Text = x.ToString(),
                       Value = ((int)x).ToString() }),"Select One", new { @class = "form-control multiple",@required="required"})

                @Html.ValidationMessage("Language", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Word for Morphological extraction:", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.Editor("GivenWord", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessage("GivenWord", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3 col-md-10">
                <input type="submit" value="Generate" class="btn btn-default" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-9">
                @if (ViewBag.Morphology4Nouns == null)
                {
                    <label> No, Rule/Word is found.</label>
                }
                else
                {
                    <Label>@ViewBag.GivenWord ==> @ViewBag.Morphology4Nouns.WordRule</Label>
                }
            </div>
        </div>


    </div>
}


@using (Html.BeginForm("Create", "MorphimExtraction", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal col-md-6" style="border:dashed">
        <h4>Source Language (English) Root words</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.WordPOSType, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(x=>x.WordPOSType,
                   EnumHelper.GetSelectList(typeof(WordPOSType)) ,
                   "Select POS Type",
                   new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.WordPOSType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WordType, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(x=>x.WordType,
                   EnumHelper.GetSelectList(typeof(WordType)) ,
                   "Select Word Type",
                   new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.WordType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RootWord, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.RootWord, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RootWord, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IrregularPluralNoun, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.IrregularPluralNoun, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IrregularPluralNoun, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IrregularPastVerb, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.IrregularPastVerb, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IrregularPastVerb, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IrregularPPVerb, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.IrregularPPVerb, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IrregularPPVerb, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-5 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-offset-10">
                @Html.ActionLink("Back to List", "Index", Model?.WordPOSType)
            </div>
        </div>
    </div>
}
<hr />



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
