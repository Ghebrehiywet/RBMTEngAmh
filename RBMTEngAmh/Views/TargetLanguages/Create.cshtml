
@using RBMTEngAmh.Models.RBTM
@model RBMTEngAmh.Models.RBTM.TargetWordFeed

@{
    ViewBag.Title = "Create";
}

<script type="text/javascript">

    $(document).ready(function () {

        $("select[name='WordPOSType']").change(function () {
            var selectedVal = $(this).val();
            if (selectedVal == "Noun") {
                NounSelected();
            }
            else if (selectedVal == "Verb") {
                VerbSelected();
            }
            else {
                OtherSelected();
            }
            $("#WordType").val('');
        });

        $("select[name='WordType']").change(function () {
            var selectedVal = $(this).val();
            var pos = $('#WordPOSType').val();
            if (selectedVal == "Regular") {
                if (pos == "Noun") {
                    RegularNoun();
                }
                else if (pos == "Verb") {
                    RegularVerb();
                }
            }
            else {
                if (pos == "Noun") {
                    IrregularNoun();
                } else if (pos == "Verb") {
                    IrregularVerb();
                }
            }
            // alert(selectedVal+pos);

        });

        var posType = $("select[name='WordPOSType']").val();
        var wordType = $("select[name='WordType']").val();

        if (posType != "") {
            if (posType == "Noun") {
                NounSelected();
            }
            else if (posType == "Verb") {
                VerbSelected();
            }
            else {
                OtherSelected();
            }
        }
        if (wordType != null) {
            if (wordType == "Regular") {
                if (posType == "Noun") {
                    RegularNoun();
                }
                else if (posType == "Verb") {
                    RegularVerb();
                }
            }
            else {
                if (posType == "Noun") {
                    IrregularNoun();
                } else if (posType == "Verb") {
                    IrregularVerb();
                }
            }
        }
    });

    function IrregularNoun() {
        $("#IrregularPluralNounDiv").show();
    }
    function IrregularVerb() {
        $("#IrregularPastVerbDiv").show();
        $("#IrregularPPVerbDiv").show();
    }
    function RegularNoun() {
        $("#IrregularPluralNounDiv").hide();
    }
    function RegularVerb() {
        $("#IrregularPastVerbDiv").hide();
        $("#IrregularPPVerbDiv").hide();
    }
    function NounSelected() {
        $("#IrregularPluralNounDiv").show();
        $("#IrregularPastVerbDiv").hide();
        $("#IrregularPPVerbDiv").hide();
    }
    function VerbSelected() {
        $("#IrregularPastVerbDiv").show();
        $("#IrregularPPVerbDiv").show();
        $("#IrregularPluralNounDiv").hide();
    }
    function OtherSelected() {
        $("#IrregularPastVerbDiv").hide();
        $("#IrregularPPVerbDiv").hide();
        $("#IrregularPluralNounDiv").hide();
    }

</script>

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
     
        <div class="form-group">
            @Html.LabelFor(model => model.WordPOSType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EnumDropDownListFor(model => model.WordPOSType, htmlAttributes: new { @class = "form-control", @id = Model.WordPOSType })*@

                @Html.DropDownListFor(model => model.WordPOSType,
                        new SelectList(Enum.GetValues(typeof(WordPOSType))),
                        "Select One",
                        new { @class = "form-control", @required="required" })
                @Html.ValidationMessageFor(model => model.WordPOSType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="WordTypeDiv">
            @Html.LabelFor(model => model.WordType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EnumDropDownListFor(model => model.WordType, htmlAttributes: new { @class = "form-control" })*@
                @Html.DropDownListFor(model => model.WordType,
                        new SelectList(Enum.GetValues(typeof(WordType))),
                        "Select One",
                        new { @class = "form-control", @required="required" })
                @Html.ValidationMessageFor(model => model.WordType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="GenderDiv">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control" })*@
                @Html.DropDownListFor(model => model.Gender,
                        new SelectList(Enum.GetValues(typeof(Gender))),
                        "Select One",
                        new { @class = "form-control", @required="required" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.RootWord, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RootWord, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RootWord, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="IrregularPluralNounDiv">
            @Html.LabelFor(model => model.IrregularPluralNoun, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IrregularPluralNoun, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IrregularPluralNoun, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="IrregularPastVerbDiv">
            @Html.LabelFor(model => model.IrregularPastVerb, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IrregularPastVerb, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IrregularPastVerb, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="IrregularPPVerbDiv">
            @Html.LabelFor(model => model.IrregularPPVerb, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IrregularPPVerb, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IrregularPPVerb, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sourceId, "sourceId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("sourceId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.sourceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
